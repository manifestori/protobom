package serializer

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	cdx "github.com/CycloneDX/cyclonedx-go"
	"github.com/bom-squad/protobom/pkg/formats"
	"github.com/bom-squad/protobom/pkg/sbom"
	"github.com/sirupsen/logrus"
)

var _ Serializer = &SerializerCDX{}

type CDXRootScheme func(ctx context.Context, bom *sbom.Document, rootsComp []cdx.Component) (*cdx.Component, []cdx.Component, []cdx.Dependency, error)

type SerializerCDX struct {
	encoding   cdx.BOMFileFormat
	version    cdx.SpecVersion
	rootScheme CDXRootScheme
}

func NewCDX(version, encoding string, rootScheme CDXRootScheme) *SerializerCDX {
	var format cdx.BOMFileFormat
	if encoding == formats.XML {
		format = cdx.BOMFileFormatXML
	} else if encoding == formats.JSON {
		format = cdx.BOMFileFormatJSON
	}

	var specVersion cdx.SpecVersion
	switch version {
	case "1.0":
		specVersion = cdx.SpecVersion1_0
	case "1.1":
		specVersion = cdx.SpecVersion1_1
	case "1.2":
		specVersion = cdx.SpecVersion1_2
	case "1.3":
		specVersion = cdx.SpecVersion1_3
	case "1.4":
		specVersion = cdx.SpecVersion1_4
	case "1.5":
		specVersion = cdx.SpecVersion1_5
	}

	return &SerializerCDX{
		encoding:   format,
		version:    specVersion,
		rootScheme: rootScheme,
	}
}

const (
	stateKey               state           = "cyclonedx_serializer_state"
	virtualCompDescription CompDescription = "virtual root scheme, refer roots through dependencies"
)

type (
	state           string
	CompDescription string
)

func (s *SerializerCDX) Serialize(bom *sbom.Document) (interface{}, error) {
	// Load the context with the CDX value. We initialize a context here
	// but we should get it as part of the method to capture cancelations
	// from the CLI or REST API.
	state := newSerializerCDXState()
	ctx := context.WithValue(context.Background(), stateKey, state)

	doc := cdx.NewBOM()
	doc.SerialNumber = bom.Metadata.Id
	ver, err := strconv.Atoi(bom.Metadata.Version)
	if err == nil {
		doc.Version = ver
	}

	metadata := cdx.Metadata{
		Component:  &cdx.Component{},
		Lifecycles: &[]cdx.Lifecycle{},
	}

	doc.Metadata = &metadata
	doc.Components = &[]cdx.Component{}
	doc.Dependencies = &[]cdx.Dependency{}

	rootComponent, rootSubComponents, rootDependencies, err := s.selectRoot(ctx, bom, s.rootScheme)
	if err != nil {
		return nil, err
	}

	doc.Metadata.Component = rootComponent
	if err := s.componentsMaps(ctx, bom); err != nil {
		return nil, err
	}

	for _, dt := range bom.Metadata.DocumentTypes {
		var lfc cdx.Lifecycle

		if dt.Type == nil {
			lfc.Name = *dt.Name
			lfc.Description = *dt.Description
		} else if *dt.Type == sbom.DocumentType_OTHER {
			lfc.Phase = cdx.LifecyclePhase(strings.ToLower(*dt.Name))
		} else if *dt.Type != sbom.DocumentType_OTHER {
			lfc.Phase = cdx.LifecyclePhase(strings.ToLower(dt.Type.String()))
		}

		*doc.Metadata.Lifecycles = append(*doc.Metadata.Lifecycles, lfc)
	}

	deps, err := s.dependencies(ctx, bom)
	if err != nil {
		return nil, err
	}
	deps = append(deps, rootDependencies...)
	doc.Dependencies = &deps

	components := state.components()
	components = append(components, rootSubComponents...)

	clearAutoRefs(&rootSubComponents)
	doc.Components = &rootSubComponents

	return doc, nil
}

// clearAutoRefs
// The last step of the CDX serialization recursively removes all autogenerated
// refs added by the protobom reader. These are added on CycloneDX ingestion
// to all nodes that don't have them. To maintain the closest fidelity, we
// clear their refs again before output to CDX
func clearAutoRefs(comps *[]cdx.Component) {
	for i := range *comps {
		if strings.HasPrefix((*comps)[i].BOMRef, "protobom-") {
			flags := strings.Split((*comps)[i].BOMRef, "--")
			if strings.Contains(flags[0], "-auto") {
				(*comps)[i].BOMRef = ""
			}
		}
		if (*comps)[i].Components != nil && len(*(*comps)[i].Components) != 0 {
			clearAutoRefs((*comps)[i].Components)
		}
	}
}

func (s *SerializerCDX) componentsMaps(ctx context.Context, bom *sbom.Document) error {
	state, err := getCDXState(ctx)
	if err != nil {
		return fmt.Errorf("reading state: %w", err)
	}

	for _, n := range bom.NodeList.Nodes {
		comp := s.nodeToComponent(n)
		if comp == nil {
			// Error? Warn?
			continue
		}

		state.componentsDict[comp.BOMRef] = comp
	}
	return nil
}

// selectRoot
// When only one root is available it is selected as the top level.
// Otherwise roots are mapped according to the scheme function,
//   - Virtual Root Scheme: <Default> Virtual root is created at the top level of the SBOM,
//     All roots are attached as sub-components and connected through the graph to the top level virtual root.
func (s *SerializerCDX) selectRoot(ctx context.Context, bom *sbom.Document, scheme CDXRootScheme) (*cdx.Component, []cdx.Component, []cdx.Dependency, error) {
	var root *cdx.Component
	var dependencies []cdx.Dependency
	var components []cdx.Component

	rootsComponent, err := s.roots(ctx, bom)
	if err != nil {
		return nil, nil, nil, fmt.Errorf("generating SBOM root component: %w", err)
	}

	// If only one root return it
	switch len(rootsComponent) {
	case 0:
		return root, components, dependencies, fmt.Errorf("no root provided")
	case 1:
		root = &rootsComponent[0]
	default:
		return scheme(ctx, bom, rootsComponent)
	}

	return root, rootsComponent, dependencies, nil
}

func (s *SerializerCDX) roots(ctx context.Context, bom *sbom.Document) ([]cdx.Component, error) {
	var rootsComp []cdx.Component

	// First, assign the top level nodes
	state, err := getCDXState(ctx)
	if err != nil {
		return nil, fmt.Errorf("reading state: %w", err)
	}

	for _, id := range bom.NodeList.GetRootElements() {
		// Search for the node and add it
		for _, n := range bom.NodeList.Nodes {
			if n.Id == id {
				rootsComp = append(rootsComp, *s.nodeToComponent(n))
				state.addedDict[id] = struct{}{}
			}
		}
	}

	return rootsComp, nil
}

// NOTE dependencies function modifies the components dictionary
func (s *SerializerCDX) dependencies(ctx context.Context, bom *sbom.Document) ([]cdx.Dependency, error) {
	var dependencies []cdx.Dependency
	state, err := getCDXState(ctx)
	if err != nil {
		return nil, fmt.Errorf("reading state: %w", err)
	}

	for _, e := range bom.NodeList.Edges {
		e := e
		if _, ok := state.addedDict[e.From]; ok {
			continue
		}

		if _, ok := state.componentsDict[e.From]; !ok {
			logrus.Info("serialize")
			return nil, fmt.Errorf("unable to find component %s", e.From)
		}

		// In this example, we tree-ify all components related with a
		// "contains" relationship. This is just an opinion for the demo
		// and it is something we can parameterize
		switch e.Type {
		case sbom.Edge_contains:
			// Make sure we have the target component
			for _, targetID := range e.To {
				state.addedDict[targetID] = struct{}{}
				if _, ok := state.componentsDict[targetID]; !ok {
					return nil, fmt.Errorf("unable to locate node %s", targetID)
				}

				if state.componentsDict[e.From].Components == nil {
					state.componentsDict[e.From].Components = &[]cdx.Component{}
				}
				*state.componentsDict[e.From].Components = append(*state.componentsDict[e.From].Components, *state.componentsDict[targetID])
			}

		case sbom.Edge_dependsOn:
			// Add to the dependency tree
			for _, targetID := range e.To {
				state.addedDict[targetID] = struct{}{}
				if _, ok := state.componentsDict[targetID]; !ok {
					return nil, fmt.Errorf("unable to locate node %s", targetID)
				}

				dependencies = append(dependencies, cdx.Dependency{
					Ref:          e.From,
					Dependencies: &e.To,
				})
			}

		default:
			// TODO(degradation) here, we would document how relationships are lost
			logrus.Warnf(
				"node %s is related with %s to %d other nodes, data will be lost",
				e.From, e.Type, len(e.To),
			)
		}
	}

	return dependencies, nil
}

// nodeToComponent converts a node in protobuf to a CycloneDX component
func (s *SerializerCDX) nodeToComponent(n *sbom.Node) *cdx.Component {
	if n == nil {
		return nil
	}
	c := &cdx.Component{
		BOMRef:      n.Id,
		Type:        cdx.ComponentType(strings.ToLower(n.PrimaryPurpose)), // Fix to make it valid
		Name:        n.Name,
		Version:     n.Version,
		Description: n.Description,
	}

	if n.Type == sbom.Node_FILE {
		c.Type = "file"
	}

	if n.Licenses != nil && len(n.Licenses) > 0 {
		var licenseChoices []cdx.LicenseChoice
		var licenses cdx.Licenses
		for _, l := range n.Licenses {
			licenseChoices = append(licenseChoices, cdx.LicenseChoice{
				License: &cdx.License{
					ID: l,
				},
			})
		}

		licenses = licenseChoices
		c.Licenses = &licenses
	}

	if n.Hashes != nil && len(n.Hashes) > 0 {
		c.Hashes = &[]cdx.Hash{}
		for algoString, hash := range n.Hashes {
			if algoVal, ok := sbom.HashAlgorithm_value[algoString]; ok {
				cdxAlgo := sbom.HashAlgorithm(algoVal).ToCycloneDX()
				if cdxAlgo == "" {
					// Data loss here.
					// TODO how do we handle when data loss occurs?
					continue
				}
				*c.Hashes = append(*c.Hashes, cdx.Hash{
					Algorithm: cdxAlgo,
					Value:     hash,
				})
			}
		}
	}

	if n.ExternalReferences != nil {
		for _, er := range n.ExternalReferences {
			if c.ExternalReferences == nil {
				c.ExternalReferences = &[]cdx.ExternalReference{}
			}

			*c.ExternalReferences = append(*c.ExternalReferences, cdx.ExternalReference{
				Type: cdx.ExternalReferenceType(er.Type), // Fix to make it valid
				URL:  er.Url,
			})
		}
	}

	if n.Identifiers != nil {
		for idType := range n.Identifiers {
			switch idType {
			case int32(sbom.SoftwareIdentifierType_PURL):
				c.PackageURL = n.Identifiers[idType]
			case int32(sbom.SoftwareIdentifierType_CPE23):
				c.CPE = n.Identifiers[idType]
			case int32(sbom.SoftwareIdentifierType_CPE22):
				// TODO(degradation): Only one CPE is supperted in CDX
				if c.CPE == "" {
					c.CPE = n.Identifiers[idType]
				}
			}
		}
	}

	return c
}

// Render calls the official CDX serializer to render the BOM into a specific version
func (s *SerializerCDX) Render(doc interface{}, wr io.Writer) error {
	if doc == nil {
		return errors.New("document is nil")
	}

	encoder := cdx.NewBOMEncoder(wr, s.encoding)
	encoder.SetPretty(true)

	if err := encoder.EncodeVersion(doc.(*cdx.BOM), s.version); err != nil {
		return fmt.Errorf("encoding sbom to stream: %w", err)
	}

	return nil
}

type serializerCDXState struct {
	addedDict      map[string]struct{}
	componentsDict map[string]*cdx.Component
}

func newSerializerCDXState() *serializerCDXState {
	return &serializerCDXState{
		addedDict:      map[string]struct{}{},
		componentsDict: map[string]*cdx.Component{},
	}
}

func (s *serializerCDXState) components() []cdx.Component {
	components := []cdx.Component{}
	for _, c := range s.componentsDict {
		if _, ok := s.addedDict[c.BOMRef]; ok {
			continue
		}
		components = append(components, *c)
	}

	return components
}

func getCDXState(ctx context.Context) (*serializerCDXState, error) {
	dm, ok := ctx.Value(stateKey).(*serializerCDXState)
	if !ok {
		return nil, errors.New("unable to cast serializer state from context")
	}
	return dm, nil
}

func VirtualRootScheme(ctx context.Context, bom *sbom.Document, rootsComp []cdx.Component) (*cdx.Component, []cdx.Component, []cdx.Dependency, error) {
	var dependencies []cdx.Dependency
	var hashs []cdx.Hash
	for _, r := range rootsComp {
		if r.Hashes != nil {
			hashs = append(hashs, *r.Hashes...)
		}
		dependencies = append(dependencies, cdx.Dependency{
			Ref:          bom.Metadata.Id,
			Dependencies: &[]string{r.BOMRef},
		})
	}

	root := cdx.Component{
		BOMRef:      bom.Metadata.Id,
		Name:        bom.Metadata.Name,
		Version:     bom.Metadata.Version,
		Description: string(virtualCompDescription),
		Hashes:      &hashs,
	}

	return &root, rootsComp, dependencies, nil
}
